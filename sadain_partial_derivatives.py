# -*- coding: utf-8 -*-
"""Sadain-partial_derivatives.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZbSXet5DH3MvmVhMrgdV_fOfKOCcuFAw
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install gradio
# %pip install sympy

import sympy as sym
from sympy import sin, cos, tan, pi, csc, sec, cot, asin, acos, atan, acsc, sec, acot, atan2, pi, log, sqrt, exp, Abs

# Derivatives of multivariable function


def calc(expression, respect_to):

    expression = "f = " + expression
    print(expression)

    expression = expression.replace("^", "**")

    x, y, z = sym.symbols("x y z")
    # f = x**4 + x * y**4 + sym.cos(x)
    lcls = locals()
    exec(expression, globals(), lcls)
    f = lcls["f"]
    print(f"f is {f}")
    # Differentiating partially w.r.t x

    match respect_to:
        case "x":
            return f.diff(x)
        case "y":
            return f.diff(y)
        case "z":
            return f.diff(z)

import gradio as gr


def calc_dir(name, respect_to):
    return calc(name, respect_to)


demo = gr.Interface(
    fn=calc,
    title="Partial Derivative Calculator - Calculus 3 Honors By Contract - Sadain Siddique",
    description="Please use asteriks to define multiplication between terms. Note: e^x is written as sym.exp(x) or sym.E^x (has to be capital E). Accounts for x,y, and z variables",
    inputs=["text", "text"],
    outputs=["text"],
    examples=[
        ["5*x^4+x*y^4"],
        ["x*y*z^4"],
        ["sin(x)*cos(x*y)+acos(y)+tan(x)"],
        ["log(56*y)+sqrt(x*y)"],
        ["sym.E^x+log(atan(x))"],
    ],
    allow_flagging="never"
)

demo.launch(share=True)